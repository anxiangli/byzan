// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Empty {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Empty {
    pub fn new() -> Empty {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Empty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Empty {
        Empty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<Empty>(
                    "Empty",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Empty {
        static mut instance: ::protobuf::lazy::Lazy<Empty> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Empty,
        };
        unsafe {
            instance.get(Empty::new)
        }
    }
}

impl ::protobuf::Clear for Empty {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Empty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Empty {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NewBlock {
    // message fields
    pub id: ::std::string::String,
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl NewBlock {
    pub fn new() -> NewBlock {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string key = 2;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    pub fn get_key(&self) -> &str {
        &self.key
    }

    // string value = 3;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    pub fn get_value(&self) -> &str {
        &self.value
    }
}

impl ::protobuf::Message for NewBlock {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(3, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NewBlock {
        NewBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &NewBlock| { &m.id },
                    |m: &mut NewBlock| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &NewBlock| { &m.key },
                    |m: &mut NewBlock| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &NewBlock| { &m.value },
                    |m: &mut NewBlock| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NewBlock>(
                    "NewBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NewBlock {
        static mut instance: ::protobuf::lazy::Lazy<NewBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NewBlock,
        };
        unsafe {
            instance.get(NewBlock::new)
        }
    }
}

impl ::protobuf::Clear for NewBlock {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_key();
        self.clear_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NewBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NewBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Block {
    // message fields
    pub idx: u32,
    pub id: ::std::string::String,
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    pub prev_hash: ::std::string::String,
    pub self_hash: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    // uint32 idx = 1;

    pub fn clear_idx(&mut self) {
        self.idx = 0;
    }

    // Param is passed by value, moved
    pub fn set_idx(&mut self, v: u32) {
        self.idx = v;
    }

    pub fn get_idx(&self) -> u32 {
        self.idx
    }

    // string id = 2;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string key = 3;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    pub fn get_key(&self) -> &str {
        &self.key
    }

    // string value = 4;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    pub fn get_value(&self) -> &str {
        &self.value
    }

    // string prev_hash = 5;

    pub fn clear_prev_hash(&mut self) {
        self.prev_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_prev_hash(&mut self, v: ::std::string::String) {
        self.prev_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prev_hash(&mut self) -> &mut ::std::string::String {
        &mut self.prev_hash
    }

    // Take field
    pub fn take_prev_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prev_hash, ::std::string::String::new())
    }

    pub fn get_prev_hash(&self) -> &str {
        &self.prev_hash
    }

    // string self_hash = 6;

    pub fn clear_self_hash(&mut self) {
        self.self_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_self_hash(&mut self, v: ::std::string::String) {
        self.self_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_self_hash(&mut self) -> &mut ::std::string::String {
        &mut self.self_hash
    }

    // Take field
    pub fn take_self_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.self_hash, ::std::string::String::new())
    }

    pub fn get_self_hash(&self) -> &str {
        &self.self_hash
    }
}

impl ::protobuf::Message for Block {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.idx = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prev_hash)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.self_hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.idx != 0 {
            my_size += ::protobuf::rt::value_size(1, self.idx, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.value);
        }
        if !self.prev_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.prev_hash);
        }
        if !self.self_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.self_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.idx != 0 {
            os.write_uint32(1, self.idx)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if !self.key.is_empty() {
            os.write_string(3, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(4, &self.value)?;
        }
        if !self.prev_hash.is_empty() {
            os.write_string(5, &self.prev_hash)?;
        }
        if !self.self_hash.is_empty() {
            os.write_string(6, &self.self_hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Block {
        Block::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "idx",
                    |m: &Block| { &m.idx },
                    |m: &mut Block| { &mut m.idx },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &Block| { &m.id },
                    |m: &mut Block| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &Block| { &m.key },
                    |m: &mut Block| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &Block| { &m.value },
                    |m: &mut Block| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "prev_hash",
                    |m: &Block| { &m.prev_hash },
                    |m: &mut Block| { &mut m.prev_hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "self_hash",
                    |m: &Block| { &m.self_hash },
                    |m: &mut Block| { &mut m.self_hash },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Block>(
                    "Block",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Block {
        static mut instance: ::protobuf::lazy::Lazy<Block> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Block,
        };
        unsafe {
            instance.get(Block::new)
        }
    }
}

impl ::protobuf::Clear for Block {
    fn clear(&mut self) {
        self.clear_idx();
        self.clear_id();
        self.clear_key();
        self.clear_value();
        self.clear_prev_hash();
        self.clear_self_hash();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockKey {
    // message fields
    pub key: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BlockKey {
    pub fn new() -> BlockKey {
        ::std::default::Default::default()
    }

    // string key = 1;

    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    pub fn get_key(&self) -> &str {
        &self.key
    }
}

impl ::protobuf::Message for BlockKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockKey {
        BlockKey::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &BlockKey| { &m.key },
                    |m: &mut BlockKey| { &mut m.key },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockKey>(
                    "BlockKey",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BlockKey {
        static mut instance: ::protobuf::lazy::Lazy<BlockKey> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockKey,
        };
        unsafe {
            instance.get(BlockKey::new)
        }
    }
}

impl ::protobuf::Clear for BlockKey {
    fn clear(&mut self) {
        self.clear_key();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockKey {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockIdx {
    // message fields
    pub idx: u32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BlockIdx {
    pub fn new() -> BlockIdx {
        ::std::default::Default::default()
    }

    // uint32 idx = 1;

    pub fn clear_idx(&mut self) {
        self.idx = 0;
    }

    // Param is passed by value, moved
    pub fn set_idx(&mut self, v: u32) {
        self.idx = v;
    }

    pub fn get_idx(&self) -> u32 {
        self.idx
    }
}

impl ::protobuf::Message for BlockIdx {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.idx = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.idx != 0 {
            my_size += ::protobuf::rt::value_size(1, self.idx, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.idx != 0 {
            os.write_uint32(1, self.idx)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockIdx {
        BlockIdx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "idx",
                    |m: &BlockIdx| { &m.idx },
                    |m: &mut BlockIdx| { &mut m.idx },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockIdx>(
                    "BlockIdx",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BlockIdx {
        static mut instance: ::protobuf::lazy::Lazy<BlockIdx> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockIdx,
        };
        unsafe {
            instance.get(BlockIdx::new)
        }
    }
}

impl ::protobuf::Clear for BlockIdx {
    fn clear(&mut self) {
        self.clear_idx();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockIdx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockIdx {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockId {
    // message fields
    pub id: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BlockId {
    pub fn new() -> BlockId {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }
}

impl ::protobuf::Message for BlockId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockId {
        BlockId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &BlockId| { &m.id },
                    |m: &mut BlockId| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockId>(
                    "BlockId",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BlockId {
        static mut instance: ::protobuf::lazy::Lazy<BlockId> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockId,
        };
        unsafe {
            instance.get(BlockId::new)
        }
    }
}

impl ::protobuf::Clear for BlockId {
    fn clear(&mut self) {
        self.clear_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockId {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockRange {
    // message fields
    pub first: u32,
    pub last: u32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BlockRange {
    pub fn new() -> BlockRange {
        ::std::default::Default::default()
    }

    // uint32 first = 1;

    pub fn clear_first(&mut self) {
        self.first = 0;
    }

    // Param is passed by value, moved
    pub fn set_first(&mut self, v: u32) {
        self.first = v;
    }

    pub fn get_first(&self) -> u32 {
        self.first
    }

    // uint32 last = 2;

    pub fn clear_last(&mut self) {
        self.last = 0;
    }

    // Param is passed by value, moved
    pub fn set_last(&mut self, v: u32) {
        self.last = v;
    }

    pub fn get_last(&self) -> u32 {
        self.last
    }
}

impl ::protobuf::Message for BlockRange {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.first = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.last = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.first != 0 {
            my_size += ::protobuf::rt::value_size(1, self.first, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last != 0 {
            my_size += ::protobuf::rt::value_size(2, self.last, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.first != 0 {
            os.write_uint32(1, self.first)?;
        }
        if self.last != 0 {
            os.write_uint32(2, self.last)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockRange {
        BlockRange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "first",
                    |m: &BlockRange| { &m.first },
                    |m: &mut BlockRange| { &mut m.first },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "last",
                    |m: &BlockRange| { &m.last },
                    |m: &mut BlockRange| { &mut m.last },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockRange>(
                    "BlockRange",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BlockRange {
        static mut instance: ::protobuf::lazy::Lazy<BlockRange> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockRange,
        };
        unsafe {
            instance.get(BlockRange::new)
        }
    }
}

impl ::protobuf::Clear for BlockRange {
    fn clear(&mut self) {
        self.clear_first();
        self.clear_last();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockRange {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockTill {
    // message fields
    pub first: u32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BlockTill {
    pub fn new() -> BlockTill {
        ::std::default::Default::default()
    }

    // uint32 first = 1;

    pub fn clear_first(&mut self) {
        self.first = 0;
    }

    // Param is passed by value, moved
    pub fn set_first(&mut self, v: u32) {
        self.first = v;
    }

    pub fn get_first(&self) -> u32 {
        self.first
    }
}

impl ::protobuf::Message for BlockTill {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.first = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.first != 0 {
            my_size += ::protobuf::rt::value_size(1, self.first, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.first != 0 {
            os.write_uint32(1, self.first)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockTill {
        BlockTill::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "first",
                    |m: &BlockTill| { &m.first },
                    |m: &mut BlockTill| { &mut m.first },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BlockTill>(
                    "BlockTill",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BlockTill {
        static mut instance: ::protobuf::lazy::Lazy<BlockTill> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BlockTill,
        };
        unsafe {
            instance.get(BlockTill::new)
        }
    }
}

impl ::protobuf::Clear for BlockTill {
    fn clear(&mut self) {
        self.clear_first();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockTill {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockTill {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResponseBlock {
    // message fields
    pub status: ::std::string::String,
    pub block: ::protobuf::SingularPtrField<Block>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ResponseBlock {
    pub fn new() -> ResponseBlock {
        ::std::default::Default::default()
    }

    // string status = 1;

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    pub fn get_status(&self) -> &str {
        &self.status
    }

    // .byzan.Block block = 2;

    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: Block) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut Block {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> Block {
        self.block.take().unwrap_or_else(|| Block::new())
    }

    pub fn get_block(&self) -> &Block {
        self.block.as_ref().unwrap_or_else(|| Block::default_instance())
    }
}

impl ::protobuf::Message for ResponseBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.status);
        }
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.status.is_empty() {
            os.write_string(1, &self.status)?;
        }
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseBlock {
        ResponseBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "status",
                    |m: &ResponseBlock| { &m.status },
                    |m: &mut ResponseBlock| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Block>>(
                    "block",
                    |m: &ResponseBlock| { &m.block },
                    |m: &mut ResponseBlock| { &mut m.block },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResponseBlock>(
                    "ResponseBlock",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResponseBlock {
        static mut instance: ::protobuf::lazy::Lazy<ResponseBlock> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResponseBlock,
        };
        unsafe {
            instance.get(ResponseBlock::new)
        }
    }
}

impl ::protobuf::Clear for ResponseBlock {
    fn clear(&mut self) {
        self.clear_status();
        self.clear_block();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResponseBlocks {
    // message fields
    pub status: ::std::string::String,
    pub blocks: ::protobuf::RepeatedField<Block>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ResponseBlocks {
    pub fn new() -> ResponseBlocks {
        ::std::default::Default::default()
    }

    // string status = 1;

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    pub fn get_status(&self) -> &str {
        &self.status
    }

    // repeated .byzan.Block blocks = 2;

    pub fn clear_blocks(&mut self) {
        self.blocks.clear();
    }

    // Param is passed by value, moved
    pub fn set_blocks(&mut self, v: ::protobuf::RepeatedField<Block>) {
        self.blocks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_blocks(&mut self) -> &mut ::protobuf::RepeatedField<Block> {
        &mut self.blocks
    }

    // Take field
    pub fn take_blocks(&mut self) -> ::protobuf::RepeatedField<Block> {
        ::std::mem::replace(&mut self.blocks, ::protobuf::RepeatedField::new())
    }

    pub fn get_blocks(&self) -> &[Block] {
        &self.blocks
    }
}

impl ::protobuf::Message for ResponseBlocks {
    fn is_initialized(&self) -> bool {
        for v in &self.blocks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.blocks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.status);
        }
        for value in &self.blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.status.is_empty() {
            os.write_string(1, &self.status)?;
        }
        for v in &self.blocks {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseBlocks {
        ResponseBlocks::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "status",
                    |m: &ResponseBlocks| { &m.status },
                    |m: &mut ResponseBlocks| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Block>>(
                    "blocks",
                    |m: &ResponseBlocks| { &m.blocks },
                    |m: &mut ResponseBlocks| { &mut m.blocks },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResponseBlocks>(
                    "ResponseBlocks",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResponseBlocks {
        static mut instance: ::protobuf::lazy::Lazy<ResponseBlocks> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResponseBlocks,
        };
        unsafe {
            instance.get(ResponseBlocks::new)
        }
    }
}

impl ::protobuf::Clear for ResponseBlocks {
    fn clear(&mut self) {
        self.clear_status();
        self.clear_blocks();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseBlocks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseBlocks {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResponseLen {
    // message fields
    pub status: ::std::string::String,
    pub len: u32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ResponseLen {
    pub fn new() -> ResponseLen {
        ::std::default::Default::default()
    }

    // string status = 1;

    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    pub fn get_status(&self) -> &str {
        &self.status
    }

    // uint32 len = 2;

    pub fn clear_len(&mut self) {
        self.len = 0;
    }

    // Param is passed by value, moved
    pub fn set_len(&mut self, v: u32) {
        self.len = v;
    }

    pub fn get_len(&self) -> u32 {
        self.len
    }
}

impl ::protobuf::Message for ResponseLen {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.len = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.status);
        }
        if self.len != 0 {
            my_size += ::protobuf::rt::value_size(2, self.len, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.status.is_empty() {
            os.write_string(1, &self.status)?;
        }
        if self.len != 0 {
            os.write_uint32(2, self.len)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseLen {
        ResponseLen::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "status",
                    |m: &ResponseLen| { &m.status },
                    |m: &mut ResponseLen| { &mut m.status },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "len",
                    |m: &ResponseLen| { &m.len },
                    |m: &mut ResponseLen| { &mut m.len },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ResponseLen>(
                    "ResponseLen",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ResponseLen {
        static mut instance: ::protobuf::lazy::Lazy<ResponseLen> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ResponseLen,
        };
        unsafe {
            instance.get(ResponseLen::new)
        }
    }
}

impl ::protobuf::Clear for ResponseLen {
    fn clear(&mut self) {
        self.clear_status();
        self.clear_len();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseLen {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseLen {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11proto/byzan.proto\x12\x05byzan\"\x07\n\x05Empty\"B\n\x08NewBlock\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x10\n\x03key\x18\x02\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x03\x20\x01(\tR\x05value\"\x8b\
    \x01\n\x05Block\x12\x10\n\x03idx\x18\x01\x20\x01(\rR\x03idx\x12\x0e\n\
    \x02id\x18\x02\x20\x01(\tR\x02id\x12\x10\n\x03key\x18\x03\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x04\x20\x01(\tR\x05value\x12\x1b\n\tprev_\
    hash\x18\x05\x20\x01(\tR\x08prevHash\x12\x1b\n\tself_hash\x18\x06\x20\
    \x01(\tR\x08selfHash\"\x1c\n\x08BlockKey\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\"\x1c\n\x08BlockIdx\x12\x10\n\x03idx\x18\x01\x20\x01(\rR\
    \x03idx\"\x19\n\x07BlockId\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"6\
    \n\nBlockRange\x12\x14\n\x05first\x18\x01\x20\x01(\rR\x05first\x12\x12\n\
    \x04last\x18\x02\x20\x01(\rR\x04last\"!\n\tBlockTill\x12\x14\n\x05first\
    \x18\x01\x20\x01(\rR\x05first\"K\n\rResponseBlock\x12\x16\n\x06status\
    \x18\x01\x20\x01(\tR\x06status\x12\"\n\x05block\x18\x02\x20\x01(\x0b2\
    \x0c.byzan.BlockR\x05block\"N\n\x0eResponseBlocks\x12\x16\n\x06status\
    \x18\x01\x20\x01(\tR\x06status\x12$\n\x06blocks\x18\x02\x20\x03(\x0b2\
    \x0c.byzan.BlockR\x06blocks\"7\n\x0bResponseLen\x12\x16\n\x06status\x18\
    \x01\x20\x01(\tR\x06status\x12\x10\n\x03len\x18\x02\x20\x01(\rR\x03len2\
    \x86\x04\n\nBlockChain\x121\n\x06upsert\x12\x0f.byzan.NewBlock\x1a\x14.b\
    yzan.ResponseBlock\"\0\x12,\n\x04push\x12\x0c.byzan.Block\x1a\x14.byzan.\
    ResponseBlock\"\0\x125\n\nget_by_key\x12\x0f.byzan.BlockKey\x1a\x14.byza\
    n.ResponseBlock\"\0\x125\n\nget_by_idx\x12\x0f.byzan.BlockIdx\x1a\x14.by\
    zan.ResponseBlock\"\0\x123\n\tget_by_id\x12\x0e.byzan.BlockId\x1a\x14.by\
    zan.ResponseBlock\"\0\x12,\n\x04last\x12\x0c.byzan.Empty\x1a\x14.byzan.R\
    esponseBlock\"\0\x12)\n\x03len\x12\x0c.byzan.Empty\x1a\x12.byzan.Respons\
    eLen\"\0\x123\n\x07history\x12\x0f.byzan.BlockKey\x1a\x15.byzan.Response\
    Blocks\"\0\x123\n\x05range\x12\x11.byzan.BlockRange\x1a\x15.byzan.Respon\
    seBlocks\"\0\x121\n\x04till\x12\x10.byzan.BlockTill\x1a\x15.byzan.Respon\
    seBlocks\"\0J\x9e\x12\n\x06\x12\x04\0\0D\x01\n\x08\n\x01\x0c\x12\x03\0\0\
    \x12\n\x08\n\x01\x02\x12\x03\x02\x08\r\n\n\n\x02\x06\0\x12\x04\x04\0\x0f\
    \x01\n\n\n\x03\x06\0\x01\x12\x03\x04\x08\x12\n\x0b\n\x04\x06\0\x02\0\x12\
    \x03\x05\x021\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x05\x06\x0c\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\x05\r\x15\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x05\x20-\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x06\x02,\n\x0c\n\x05\x06\
    \0\x02\x01\x01\x12\x03\x06\x06\n\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\
    \x06\x0b\x10\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x06\x1b(\n\x0b\n\x04\
    \x06\0\x02\x02\x12\x03\x07\x025\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\
    \x07\x06\x10\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x07\x11\x19\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x03\x07$1\n\x0b\n\x04\x06\0\x02\x03\x12\x03\
    \x08\x025\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x08\x06\x10\n\x0c\n\x05\
    \x06\0\x02\x03\x02\x12\x03\x08\x11\x19\n\x0c\n\x05\x06\0\x02\x03\x03\x12\
    \x03\x08$1\n\x0b\n\x04\x06\0\x02\x04\x12\x03\t\x023\n\x0c\n\x05\x06\0\
    \x02\x04\x01\x12\x03\t\x06\x0f\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\t\
    \x10\x17\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\t\"/\n\x0b\n\x04\x06\0\
    \x02\x05\x12\x03\n\x02,\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03\n\x06\n\n\
    \x0c\n\x05\x06\0\x02\x05\x02\x12\x03\n\x0b\x10\n\x0c\n\x05\x06\0\x02\x05\
    \x03\x12\x03\n\x1b(\n\x0b\n\x04\x06\0\x02\x06\x12\x03\x0b\x02)\n\x0c\n\
    \x05\x06\0\x02\x06\x01\x12\x03\x0b\x06\t\n\x0c\n\x05\x06\0\x02\x06\x02\
    \x12\x03\x0b\n\x0f\n\x0c\n\x05\x06\0\x02\x06\x03\x12\x03\x0b\x1a%\n\x0b\
    \n\x04\x06\0\x02\x07\x12\x03\x0c\x023\n\x0c\n\x05\x06\0\x02\x07\x01\x12\
    \x03\x0c\x06\r\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03\x0c\x0e\x16\n\x0c\n\
    \x05\x06\0\x02\x07\x03\x12\x03\x0c!/\n\x0b\n\x04\x06\0\x02\x08\x12\x03\r\
    \x023\n\x0c\n\x05\x06\0\x02\x08\x01\x12\x03\r\x06\x0b\n\x0c\n\x05\x06\0\
    \x02\x08\x02\x12\x03\r\x0c\x16\n\x0c\n\x05\x06\0\x02\x08\x03\x12\x03\r!/\
    \n\x0b\n\x04\x06\0\x02\t\x12\x03\x0e\x021\n\x0c\n\x05\x06\0\x02\t\x01\
    \x12\x03\x0e\x06\n\n\x0c\n\x05\x06\0\x02\t\x02\x12\x03\x0e\x0b\x14\n\x0c\
    \n\x05\x06\0\x02\t\x03\x12\x03\x0e\x1f-\n\t\n\x02\x04\0\x12\x03\x11\0\
    \x10\n\n\n\x03\x04\0\x01\x12\x03\x11\x08\r\n\n\n\x02\x04\x01\x12\x04\x13\
    \0\x17\x01\n\n\n\x03\x04\x01\x01\x12\x03\x13\x08\x10\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x03\x14\x02\x10\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x14\x02\
    \x13\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x14\t\x0b\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x14\x0e\x0f\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x15\x02\x11\n\r\n\
    \x05\x04\x01\x02\x01\x04\x12\x04\x15\x02\x14\x10\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x15\
    \t\x0c\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x15\x0f\x10\n\x0b\n\x04\
    \x04\x01\x02\x02\x12\x03\x16\x02\x13\n\r\n\x05\x04\x01\x02\x02\x04\x12\
    \x04\x16\x02\x15\x11\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x16\x02\x08\
    \n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x16\t\x0e\n\x0c\n\x05\x04\x01\
    \x02\x02\x03\x12\x03\x16\x11\x12\n\n\n\x02\x04\x02\x12\x04\x19\0\x20\x01\
    \n\n\n\x03\x04\x02\x01\x12\x03\x19\x08\r\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03\x1a\x02\x11\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x1a\x02\x19\x0f\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03\x1a\t\x0c\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1a\x0f\
    \x10\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1b\x02\x10\n\r\n\x05\x04\x02\
    \x02\x01\x04\x12\x04\x1b\x02\x1a\x11\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03\x1b\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1b\t\x0b\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03\x1b\x0e\x0f\n\x0b\n\x04\x04\x02\x02\
    \x02\x12\x03\x1c\x02\x11\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\x1c\x02\
    \x1b\x10\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x1c\x02\x08\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x03\x1c\t\x0c\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03\x1c\x0f\x10\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x1d\x02\x13\n\r\
    \n\x05\x04\x02\x02\x03\x04\x12\x04\x1d\x02\x1c\x11\n\x0c\n\x05\x04\x02\
    \x02\x03\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\
    \x1d\t\x0e\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x1d\x11\x12\n\x0b\n\
    \x04\x04\x02\x02\x04\x12\x03\x1e\x02\x17\n\r\n\x05\x04\x02\x02\x04\x04\
    \x12\x04\x1e\x02\x1d\x13\n\x0c\n\x05\x04\x02\x02\x04\x05\x12\x03\x1e\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\x03\x1e\t\x12\n\x0c\n\x05\x04\
    \x02\x02\x04\x03\x12\x03\x1e\x15\x16\n\x0b\n\x04\x04\x02\x02\x05\x12\x03\
    \x1f\x02\x17\n\r\n\x05\x04\x02\x02\x05\x04\x12\x04\x1f\x02\x1e\x17\n\x0c\
    \n\x05\x04\x02\x02\x05\x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\x02\x02\
    \x05\x01\x12\x03\x1f\t\x12\n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03\x1f\
    \x15\x16\n\n\n\x02\x04\x03\x12\x04\"\0$\x01\n\n\n\x03\x04\x03\x01\x12\
    \x03\"\x08\x10\n\x0b\n\x04\x04\x03\x02\0\x12\x03#\x02\x11\n\r\n\x05\x04\
    \x03\x02\0\x04\x12\x04#\x02\"\x12\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03#\
    \x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03#\t\x0c\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03#\x0f\x10\n\n\n\x02\x04\x04\x12\x04&\0(\x01\n\n\n\
    \x03\x04\x04\x01\x12\x03&\x08\x10\n\x0b\n\x04\x04\x04\x02\0\x12\x03'\x02\
    \x11\n\r\n\x05\x04\x04\x02\0\x04\x12\x04'\x02&\x12\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03'\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03'\t\x0c\
    \n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03'\x0f\x10\n\n\n\x02\x04\x05\x12\
    \x04*\0,\x01\n\n\n\x03\x04\x05\x01\x12\x03*\x08\x0f\n\x0b\n\x04\x04\x05\
    \x02\0\x12\x03+\x02\x10\n\r\n\x05\x04\x05\x02\0\x04\x12\x04+\x02*\x11\n\
    \x0c\n\x05\x04\x05\x02\0\x05\x12\x03+\x02\x08\n\x0c\n\x05\x04\x05\x02\0\
    \x01\x12\x03+\t\x0b\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03+\x0e\x0f\n\n\n\
    \x02\x04\x06\x12\x04.\01\x01\n\n\n\x03\x04\x06\x01\x12\x03.\x08\x12\n\
    \x0b\n\x04\x04\x06\x02\0\x12\x03/\x02\x13\n\r\n\x05\x04\x06\x02\0\x04\
    \x12\x04/\x02.\x14\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03/\x02\x08\n\x0c\
    \n\x05\x04\x06\x02\0\x01\x12\x03/\t\x0e\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x03/\x11\x12\n\x0b\n\x04\x04\x06\x02\x01\x12\x030\x02\x12\n\r\n\x05\
    \x04\x06\x02\x01\x04\x12\x040\x02/\x13\n\x0c\n\x05\x04\x06\x02\x01\x05\
    \x12\x030\x02\x08\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x030\t\r\n\x0c\n\
    \x05\x04\x06\x02\x01\x03\x12\x030\x10\x11\n\n\n\x02\x04\x07\x12\x043\05\
    \x01\n\n\n\x03\x04\x07\x01\x12\x033\x08\x11\n\x0b\n\x04\x04\x07\x02\0\
    \x12\x034\x02\x13\n\r\n\x05\x04\x07\x02\0\x04\x12\x044\x023\x13\n\x0c\n\
    \x05\x04\x07\x02\0\x05\x12\x034\x02\x08\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x034\t\x0e\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x034\x11\x12\n\n\n\x02\
    \x04\x08\x12\x047\0:\x01\n\n\n\x03\x04\x08\x01\x12\x037\x08\x15\n\x0b\n\
    \x04\x04\x08\x02\0\x12\x038\x02\x14\n\r\n\x05\x04\x08\x02\0\x04\x12\x048\
    \x027\x17\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x038\x02\x08\n\x0c\n\x05\x04\
    \x08\x02\0\x01\x12\x038\t\x0f\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x038\x12\
    \x13\n\x0b\n\x04\x04\x08\x02\x01\x12\x039\x02\x12\n\r\n\x05\x04\x08\x02\
    \x01\x04\x12\x049\x028\x14\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x039\x02\
    \x07\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x039\x08\r\n\x0c\n\x05\x04\x08\
    \x02\x01\x03\x12\x039\x10\x11\n\n\n\x02\x04\t\x12\x04<\0?\x01\n\n\n\x03\
    \x04\t\x01\x12\x03<\x08\x16\n\x0b\n\x04\x04\t\x02\0\x12\x03=\x02\x14\n\r\
    \n\x05\x04\t\x02\0\x04\x12\x04=\x02<\x18\n\x0c\n\x05\x04\t\x02\0\x05\x12\
    \x03=\x02\x08\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03=\t\x0f\n\x0c\n\x05\x04\
    \t\x02\0\x03\x12\x03=\x12\x13\n\x0b\n\x04\x04\t\x02\x01\x12\x03>\x02\x1c\
    \n\x0c\n\x05\x04\t\x02\x01\x04\x12\x03>\x02\n\n\x0c\n\x05\x04\t\x02\x01\
    \x06\x12\x03>\x0b\x10\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03>\x11\x17\n\
    \x0c\n\x05\x04\t\x02\x01\x03\x12\x03>\x1a\x1b\n\n\n\x02\x04\n\x12\x04A\0\
    D\x01\n\n\n\x03\x04\n\x01\x12\x03A\x08\x13\n\x0b\n\x04\x04\n\x02\0\x12\
    \x03B\x02\x14\n\r\n\x05\x04\n\x02\0\x04\x12\x04B\x02A\x15\n\x0c\n\x05\
    \x04\n\x02\0\x05\x12\x03B\x02\x08\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03B\t\
    \x0f\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03B\x12\x13\n\x0b\n\x04\x04\n\x02\
    \x01\x12\x03C\x02\x11\n\r\n\x05\x04\n\x02\x01\x04\x12\x04C\x02B\x14\n\
    \x0c\n\x05\x04\n\x02\x01\x05\x12\x03C\x02\x08\n\x0c\n\x05\x04\n\x02\x01\
    \x01\x12\x03C\t\x0c\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x03C\x0f\x10b\x06p\
    roto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
